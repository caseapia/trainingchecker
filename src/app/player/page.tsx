"use client";
import { useSearchParams } from 'next/navigation';
import {useEffect, useState, Suspense, useCallback} from 'react';
import styles from './page.module.scss';
import { BadgeRenderer } from '@/components/BadgeRenderer/BadgeRenderer';
import Button from '@/components/Buttons/Button';
import CheckIcon from '@/icons/checkCircle.svg';
import CopyIcon from '@/icons/copy.svg';
import HammerIcon from '@/icons/hammer.svg';
import RefreshIcon from '@/icons/page-player/refresh.svg';
import { Modal } from '@/components/Modal/Modal';
import Link from 'next/link';
import { Table, Thead, Tr, Td, TBody, Th } from '@/components/Table/Table';
import { useRouter } from 'next/navigation';
import PageWrapper from '@/components/PageWrapper/PageWrapper';
import { toast } from '@/utils/toast';
import Loader from '@/modules/Loader/Loader';
import Chip from '@/components/Chip/Chip';
import {useTransformTextColor} from "@/hooks/useTransofrmTextColor";
import PlayerData from './types';
import {metric, setMetricInstance} from "@/utils/metric";
import {sendMetric} from "@/hooks/sendMetric";

const PlayerInfo = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const nickname = searchParams.get('nickname');
  const [buttonState, setButtonState] = useState<boolean>(false);
  const [playerData, setPlayerData] = useState<PlayerData>({
    id: NaN,
    login: '',
    access: NaN,
    moder: NaN,
    verify: NaN,
    verifyText: '',
    mute: NaN,
    online: NaN,
    regdate: '',
    lastlogin: '',
    playerid: NaN,
    warn: []
  });
  const [diffInDays, setDiffInDays] = useState(NaN);
  const [isLoaded, setIsLoaded] = useState<boolean>(false);
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
	const transformedVerificationText = useTransformTextColor;

  useEffect(() => {
    setMetricInstance(sendMetric);
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    // metric.send({
    //   action: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞',
    //   additionMessage: `${nickname}`,
    // })
  }, []);
	
	useEffect(() => {
		if (!nickname) {
      // metric.send({
      //   action: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É player –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞',
      //   error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞',
      // });
			router.push('../');
			toast.error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤–∞—Å –æ–±—Ä–∞—Ç–Ω–æ...', {
				lifeTime: 5000
			});
		}
	}, [nickname, router]);
	
	const getData = useCallback(async () => {
		if (!nickname) return;
		
		const url = `${process.env.NEXT_PUBLIC_API_USER_URL}/${nickname}`;
		
		try {
			const response = await fetch(url);
			
			if (!response.ok) {
				if (response.status === 404) {
          // metric.send({
          //   action: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∏–∫–Ω–µ–π–º',
          //   error: `–ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º ${nickname} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
          // });
					router.push('../');
					toast.error(`–ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º ${nickname} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É`, {
						lifeTime: 5000,
					});
				}
			}
			
			const result = await response.json();
			setPlayerData({
				id: Number(result.data.id),
				login: result.data.login,
				access: Number(result.data.access),
				moder: Number(result.data.moder),
				verify: Number(result.data.verify),
				verifyText: result.data.verifyText,
				mute: Number(result.data.mute),
				online: Number(result.data.online),
				regdate: result.data.regdate,
				lastlogin: result.data.lastlogin,
				playerid: Number(result.data.playerid),
				warn: result.data.warn as Array<{ reason: string; bantime: string; admin: string }>,
			});
			setIsLoaded(true);
		} catch (error) {
			console.error(error);
		}
	}, [nickname, router]);

  const refreshData = () => {
    getData();
    toast.success(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ ${nickname} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`, {
      lifeTime: 5000,
    })
    setButtonState(true);
    setTimeout(() => {
      setButtonState(false);
    }, 5000)
    // metric.send({
    //   action: `–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ ${nickname}`
    // })
  }
	
	useEffect(() => {
		getData();
	}, [nickname]);

  useEffect(() => {
    if (!playerData.lastlogin) return;
  
    const dates = () => {
      const today = new Date();
      const lastLoginDate = new Date(playerData.lastlogin);
  
      const diffInTime = today.getTime() - lastLoginDate.getTime();
      const diffInDays = Math.floor(diffInTime / (1000 * 3600 * 24));
  
      setDiffInDays(diffInDays);
    };
  
    dates();
  }, [playerData.lastlogin]);

  const getDaySuffix = (days: number) => {
    const lastDigit = days % 10;
    const lastTwoDigits = days % 100;
  
    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) return "–¥–Ω–µ–π";
    if (lastDigit === 1) return "–¥–µ–Ω—å";
    if (lastDigit >= 2 && lastDigit <= 4) return "–¥–Ω—è";
    return "–¥–Ω–µ–π";
  };

  const openModal = () => setIsModalOpen(true);
  const closeModal = () => setIsModalOpen(false);
  
  const copyPunishments = () => {
    if (playerData.warn.length > 0) {
      const punishments = playerData.warn
        .map(warn => `${warn.admin} // ${warn.reason} // ${warn.bantime}`)
        .join(';\n');
      const punishmentsCount = playerData.warn.length;
      navigator.clipboard.writeText(
        `–°–ø–∏—Å–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏–π ${playerData.login} (${playerData.id})\n\n${punishments}\n\n–í—Å–µ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–π: ${punishmentsCount}`
      );
      toast.success(`–ù–∞–∫–∞–∑–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ${playerData.login} –±—ã–ª–∏ –ø–æ–º–µ—â–µ–Ω—ã –≤ –≤–∞—à –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`, {
        isByModal: true,
      })
    } else {
      toast.error(`–ò–≥—Ä–æ–∫ ${playerData.login} –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏–π`,)
    }
  }

  const getVerify = () => {
    switch (playerData.verify) {
      case 1: 
        return `–Æ—Ç—É–±–µ—Ä`
      case 2: 
        return `–ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (—Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–¥–æ–≤)`
      case 3: 
        return `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫`
      case 4: 
        return `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –æ—Ç—Å—Ç–∞–≤–∫–µ`
      case 5: 
        return `–°–ø–æ–Ω—Å–æ—Ä`
      case 6: 
        return `–°–æ–∑–¥–∞—Ç–µ–ª—å –º–∏—Ä–æ–≤`
      case 7: 
        return `ü§®`
      default: 
        return `–ù–µ—Ç`
    }
  }

  const getModer = () => {
    if (playerData.moder >= 998) {
      return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
    }

    switch (playerData.moder) {
      case 1:
        return '–ú–ª–∞–¥—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä';
      case 2:
        return '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä';
      case 3:
        return '–°—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä';
      default:
        return '–ò–≥—Ä–æ–∫';
    }
  }

  return isLoaded ? (
    <>
      <div className={styles.ResultWrapper}>
        <p><strong>ID:</strong> {playerData.id}</p>
        <p><strong>–ù–∏–∫:</strong> {playerData.login}</p>
        <strong>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</strong> <Chip label={getModer()} />
        <p><strong>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> {`${getVerify()} (ID: ${playerData.verify})`}</p>
        {playerData.verify > 0 && (
          <p><strong>–¢–µ–∫—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</strong> {transformedVerificationText(playerData.verifyText)}</p>
        )}
        <p><strong>–í—Ä–µ–º—è –º—É—Ç–∞:</strong> {playerData.mute ? `${playerData.mute}` : <span style={{ color: '#91ec66e7' }}>–ù–µ—Ç</span>}</p>
        <p><strong>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</strong> 
          {
            playerData.regdate === '1970-01-01 03:00:00'
            ? ' –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–æ 2018 –≥–æ–¥–∞'
            : ` ${playerData.regdate}`
          }
        </p>
        <p>
          <strong>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞: </strong>
          {new Date(playerData.lastlogin).toDateString() === new Date().toDateString() && playerData.online === 0 ? (
            playerData.lastlogin
          ) : new Date(playerData.lastlogin).toDateString() !== new Date().toDateString() && playerData.online === 0 ? (
            `${playerData.lastlogin} (${diffInDays} ${getDaySuffix(diffInDays)} –Ω–∞–∑–∞–¥)`
          ) : null}
          {playerData.online ? (
            <span style={{ color: '#91ec66e7' }}>–°–µ–π—á–∞—Å –≤ —Å–µ—Ç–∏ <span style={{ color: 'white' }}>(ID: {playerData.playerid})</span></span>
          ) : null}
        </p>
	      <hr className={styles.ProfileLine}/>
	      <h5 className={styles.h5}>–ó–Ω–∞—á–∫–∏</h5>
	      <BadgeRenderer player={playerData}/>
	      <div className={styles.ButtonGroup}>
          <Button
            type="Secondary"
            text="–û–±–Ω–æ–≤–∏—Ç—å"
            action="button"
            icon={RefreshIcon}
            onClick={refreshData}
            disabled={buttonState}
          />
          <Button 
            type='Secondary'
            text='–ù–∞–∫–∞–∑–∞–Ω–∏—è'
            action='button'
            disabled={playerData.warn.length <= 0}
            onClick={openModal}
            icon={HammerIcon}
          />
        </div>
      </div>
      <Modal 
        isOpen={isModalOpen} 
        onClose={closeModal} 
        title={`–°–ø–∏—Å–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏–π ${playerData.login} (${playerData.id})`} 
        secondButtonContent='–ó–∞–∫—Ä—ã—Ç—å'
        secondButtonIcon={CheckIcon}
        secondButtonAction={closeModal}
        firstButtonContent='–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'
        firstButtonIcon={CopyIcon}
        firstButtonAction={copyPunishments}
      >
        {playerData.warn.length > 0 ? (
          <Table width={100}>
            <Thead>
              <Tr>
                <Th>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</Th>
                <Th>–ü—Ä–∏—á–∏–Ω–∞</Th>
                <Th>–î–∞—Ç–∞</Th>
              </Tr>
            </Thead>
            <TBody>
              {playerData.warn.map((warn, index) => (
                <Tr key={index}>
                  <Td><Link href={`?nickname=${warn.admin}`} onClick={closeModal}>{warn.admin}</Link></Td>
                  <Td>{warn.reason}</Td>
                  <Td>{new Date(warn.bantime).toLocaleString()}</Td>
                </Tr>
              ))}
            </TBody>
          </Table>
        ) : <p style={{ color: 'var(--color-danger)', textAlign: 'center' }}>–£ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏–π</p>}
      </Modal>
    </>
  ) : (
    <>
      <Loader />
    </>
  );
}

const Result = () => (
  <PageWrapper>
    <h1>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ</h1>
    <Suspense fallback={<Loader />}>
      <PlayerInfo />
    </Suspense>
  </PageWrapper>
);

export default Result;
